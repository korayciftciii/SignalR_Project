<!DOCTYPE html>
<html lang="en">
<head>
    @await Component.InvokeAsync("AdminHeader")
</head>
<body>
    <div class="wrapper">
        @await Component.InvokeAsync("AdminAppBar")
        @await Component.InvokeAsync("AdminSideBar")
        <div class="main-panel">
            <div class="content">
                <div class="container-fluid">
                    @RenderBody()
                </div>
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("AdminScripts")
    @await RenderSectionAsync("Scripts", required: false)
	<script>
		function getTimeAgo(dateString) {
			const now = new Date();
			const past = new Date(dateString);
			const diffMs = now - past;

			const seconds = Math.floor(diffMs / 1000);
			const minutes = Math.floor(seconds / 60);
			const hours = Math.floor(minutes / 60);
			const days = Math.floor(hours / 24);

			if (seconds < 60) return `${seconds} seconds ago`;
			if (minutes < 60) return `${minutes} minutes ago`;
			if (hours < 24) return `${hours} hours ago`;
			return `${days} days ago`;
		}

		$(function () {
			var connection = new signalR.HubConnectionBuilder()
				.withUrl("https://localhost:7295/SignalRHub")
				.build();

			connection.start().then(function () {
				connection.invoke("GetNotificationCounts");
				connection.invoke("GetUnreadNotifications");

				setInterval(() => {
					connection.invoke("GetNotificationCounts");
				}, 5000);
				setInterval(() => {
					connection.invoke("GetUnreadNotifications");
				}, 5000);
			}).catch(function (err) {
				console.error("SignalR Connection Error:", err.toString());
			});

			connection.on("ReceiveNotificationCount", function (notificationCounts) {
				const unread = notificationCounts.unreadNotificationCount;
				const total = notificationCounts.notificationCount;
				if ($("#unreadnotification").length && $("#notificationcount").length) {
					$("#unreadnotification").text(unread);
					$("#notificationcount").text(total);
					$("#sidebarnotificationcount").text(total);
				}
			});

			connection.on("ReceiveUnreadNotifications", function(values){
				let color = "";
				let icon = "";

				$("#notificationlist").empty();
				values.forEach((item) => {
					if(item.notificationType === "New Reservation") {
						color = "primary";
						icon = "la la-calendar";
					} else if(item.notificationType === "New Comment") {
						color = "success";
						icon = "la la-comment";
					} else if(item.notificationType === "New Order") {
						color = "warning";
						icon = "la la-reorder";
					}

					$("#notificationlist").append(`
						<a class="dropdown-item" href="/Admin/Notification/NotificationDetail/${item.notificationId}">
							<div class="notif-icon notif-${color}"> <i class="${icon}"></i> </div>
							<div class="notif-content">
								<span class="block">${item.notificationType}</span>
								<span class="time">${getTimeAgo(item.notificationDate)}</span>
							</div>
						</a>
					`);
				});
			});
		});
	</script>

</body>
</html>
